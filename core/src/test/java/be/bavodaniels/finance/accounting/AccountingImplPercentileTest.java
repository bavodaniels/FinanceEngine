package be.bavodaniels.finance.accounting;

import org.apache.commons.math4.legacy.stat.descriptive.rank.Percentile;
import org.apache.commons.math4.legacy.stat.ranking.NaNStrategy;
import org.junit.jupiter.api.Test;

import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;

class AccountingImplPercentileTest {
    private final List<Double> data = List.of(-0.01,
            -0.01,
            -0.01,
            -0.01,
            -0.01,
            -0.04,
            -0.04,
            -0.04,
            -0.04,
            -0.04,
            -0.04,
            -0.04,
            -0.07,
            -0.07,
            -0.09,
            -0.1,
            -0.12,
            -0.14,
            -0.15,
            -0.16,
            -0.17,
            -0.19,
            -0.2,
            -0.22,
            -0.27,
            -0.29,
            -0.3,
            -0.32,
            -0.32,
            -0.35,
            -0.43,
            -0.45,
            -0.45,
            -0.45,
            -0.48,
            -0.51,
            -0.54,
            -0.55,
            -0.56,
            -0.57,
            -0.58,
            -0.59,
            -0.6,
            -0.61,
            -0.63,
            -0.65,
            -0.65,
            -0.68,
            -0.69,
            -0.7,
            -0.7,
            -0.72,
            -0.74,
            -0.8,
            -0.81,
            -0.82,
            -0.84,
            -0.86,
            -0.91,
            -0.96,
            -0.96,
            -0.98,
            -0.99,
            -1.09,
            -1.09,
            -1.14,
            -1.15,
            -1.19,
            -1.19,
            -1.2,
            -1.25,
            -1.25,
            -1.25,
            -1.3,
            -1.31,
            -1.39,
            -1.41,
            -1.47,
            -1.51,
            -1.53,
            -1.53,
            -1.54,
            -1.64,
            -1.75,
            -1.8,
            -1.8,
            -1.81,
            -1.91,
            -2.05,
            -2.1,
            -2.22,
            -2.28,
            -2.59,
            -2.62,
            -2.64,
            -2.73,
            0.03,
            0.04,
            0.04,
            0.05,
            0.05,
            0.05,
            0.06,
            0.07,
            0.08,
            0.1,
            0.11,
            0.13,
            0.14,
            0.14,
            0.15,
            0.16,
            0.16,
            0.17,
            0.17,
            0.19,
            0.2,
            0.2,
            0.26,
            0.27,
            0.29,
            0.29,
            0.3,
            0.34,
            0.35,
            0.36,
            0.38,
            0.38,
            0.39,
            0.4,
            0.4,
            0.4,
            0.43,
            0.45,
            0.46,
            0.49,
            0.52,
            0.54,
            0.56,
            0.57,
            0.58,
            0.58,
            0.6,
            0.61,
            0.62,
            0.62,
            0.64,
            0.67,
            0.72,
            0.76,
            0.82,
            0.83,
            0.85,
            0.88,
            0.94,
            0.95,
            0.98,
            1.03,
            1.04,
            1.06,
            1.14,
            1.15,
            1.18,
            1.27,
            1.29,
            1.3,
            1.34,
            1.36,
            1.38,
            1.38,
            1.46,
            1.47,
            1.49,
            1.61,
            1.72,
            1.78,
            1.78,
            1.82,
            1.83,
            1.85,
            1.93,
            1.97,
            2.05,
            2.06,
            2.07,
            2.1,
            2.11,
            2.11,
            2.11,
            2.15,
            2.16,
            2.2,
            2.29,
            2.47,
            2.53,
            2.66,
            2.71,
            2.88,
            4.19,
            0.98);

    @Test
    void testPercentiles() {
        Percentile p = new Percentile().withEstimationType(Percentile.EstimationType.R_7)
                .withNaNStrategy(NaNStrategy.REMOVED);
        p.setData(data.stream().mapToDouble(value -> value).toArray());

        double p1 = p.evaluate(1);
        double p30 = p.evaluate(30);
        double p70 = p.evaluate(70);
        double p99 = p.evaluate(99);

        assertEquals(-2.6202, p1);
        assertEquals(-0.5190000000000001, p30);
        assertEquals(0.5729999999999997, p70);
        assertEquals(2.7116999999999982, p99);

        double lpr = p1 / p30;
        double upr = p99 / p70;

        double lowerTail = (p1 / p30) / 4.43;
        double upperTail = upr / 4.43;

        assertEquals(1.1396286485992768, lowerTail);
        assertEquals(1.0682755604930683, upperTail);
    }
}